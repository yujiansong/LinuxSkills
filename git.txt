
$ mkdir learngit   : 创建一个learngit目录

$ cd learngit      : 进入learngit

$ pwd              : 用于显示当前目录

$ git init         : 把这个目录变成Git可以管理的仓库

$ ls -ah           : 查看 .git 目录

$ git add readme.txt :  把readme.txt文件添加到仓库

$ git commit -m "wrote a readme file"  : 把文件提交到仓库
                   : -m后面输入的是本次提交的说明
				   : commit可以一次提交很多文件，所以你可以多次add不同的文件

总结：
				   
初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

------------------------------------------------------------------------------

$ git status      : 可以让我们时刻掌握仓库当前的状态

$ git diff readme.txt  : 查看具体修改的内容

总结：

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

------------------------------------------------------------------------------

$ git log  : 显示从最近到最远的提交日志(退出：ctrl + C 或 q)

$ git log --pretty=oneline  : 显示由近到远提交的日志.

$ git reset --hard HEAD^    : 版本回退
                            : HEAD指向的版本就是当前的版本
							: 上一个版本就是HEAD^，上上一个版本就是HEAD^^
							: 往上100个版本可以写成HEAD~100

$ cat readme.txt            : 查看readme.txt 内容

$ git reset --hard 3628164  : 指定回到某个版本(3628164)版本号写前几位就可以

$ git reflog                : 查看命令历史,用来记录你的每一次命令

-----------------------------------------------------------------------------

$ git diff HEAD -- readme.txt  : 查看工作区和版本库里面最新版本的区别

$ git checkout -- readme.txt   : 把readme.txt文件在工作区的修改全部撤销

                               : 一种是readme.txt自修改后还没有被放到暂存区，
							     现在，撤销修改就回到和版本库一模一样的状态.
								 
							   : 一种是readme.txt已经添加到暂存区后，
							     又作了修改，现在，撤销修改就回到添加到暂存区后的状态.
								 
                               : 总之，就是让这个文件回到最近一次git commit或git add时的状态.

$ git reset HEAD readme.txt    : 把暂存区的修改撤销掉（unstage），重新放回工作区.

总结: 

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
       第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，
       不过前提是没有推送到远程库。
	   
-----------------------------------------------------------------------------------------------

$ rm test.txt : 删除test.txt文件.

确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt

$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
另一种情况是删错了，可以很轻松地把误删的文件恢复到最新版本

$ rm test.txt

$ $ git checkout -- test.txt
 
-------------------------------------------------------------------------

$ git remote add origin git@github.com:jiansongyu/Java-jdbc2.git

      远程库的名字就是origin，这是Git默认的叫法.
	  jiansongyu  : github账户名.

$ git push -u origin master : 把本地库的内容推送到远程，
                              用git push命令，实际上是把当前分支master推送到远程.
				
   由于远程库是空的，我们第一次推送master分支时，
加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过命令：

$ git push origin master

把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

总结：

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
而SVN在没有联网的时候是拒绝干活的！
当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

----------------------------------------------------------------------------------------------------

$ git clone git@github.com:jiansongyu/gitskills.git

  : 远程库已经准备好了，下一步是用命令git clone克隆一个本地库
$ ls  :查看已存在的文件

总结：

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。 

-------------------------------------------------------------------------

创建与合并分支

$ git checkout -b dev
创建dev分支

git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
Switched to branch 'dev'

用git branch命令查看当前分支：git branch命令会列出所有分支，当前分支前面会标一个*号。
$ git branch
* dev
  master 
  
然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
 
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'

切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！
因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
 
git merge命令用于合并指定分支到当前分支。合并后，
再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev
Deleted branch dev (was fec145a).

删除后，查看branch，就只剩下master分支了：

$ git branch
* master

总结：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

-------------------------------------------------------------------------------------------

<<<<<<< HEAD

=======
>>>>>>> featurel







 





