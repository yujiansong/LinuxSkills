

打开命令提示符窗口，敲入python

提示符>>>就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。
         现在，输入exit()并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。
		 
Python打印出指定的文字，可以用print()函数:
>>> print('hello, world')
hello, world

安装好文本编辑器后，输入以下代码：
print('hello, world')
注意:print前面不要有任何空格。然后，选择一个目录，例如C:\work，把文件保存为hello.py，
就可以打开命令行窗口，把当前目录切换到hello.py所在目录，就可以运行这个程序了：

C:\work>python hello.py
hello, world


总结: 

用文本编辑器写Python程序，然后保存为后缀为.py的文件，就可以用Python直接运行这个程序了。

Python的交互模式和直接运行.py文件有什么区别呢？

直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。

直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。

用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27'的超大显示器！

-----------------------------------------------------------------------------------------------------------------------------------

输入

现在，你已经可以用print()输出你想要的结果了。但是，如果要让用户从电脑输入一些字符怎么办？
Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：

>>> name = input()
Michael
当你输入name = input()并按下回车后，Python交互式命令行就在等待你的输入了。
这时，你可以输入任意字符，然后按回车后完成输入。

输入完成后，不会有任何提示，Python交互式命令行又回到>>>状态了。
那我们刚才输入的内容到哪去了？答案是存放到name变量里了。可以直接输入name查看变量内容：

>>> name
'Michael'

打印name变量的内容，除了直接写name然后按回车外，还可以用print()函数：

>>> print(name)
Michael

有了输入和输出，我们就可以把上次打印'hello, world'的程序改成有点意义的程序了：

name = input()
print('hello,', name)

运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入name变量中；
第二行代码会根据用户的名字向用户说hello，比如输入Michael：

C:\Workspace> python hello.py
Michael
hello, Michael

但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。
幸好，input()可以让你显示一个字符串来提示用户，于是我们把代码改成：

name = input('please enter your name: ')
print('hello,', name)
再次运行这个程序，你会发现，程序一运行，会首先打印出please enter your name:，
这样，用户就可以根据提示，输入名字后，得到hello, xxx的输出：

C:\Workspace> python hello.py
please enter your name: Michael
hello, Michael

---------------------------------------------------------------

数据类型和变量


