
===========================================
利用 test 命令的测试功能

[root@bestjiansong shellscript]# test -e /dmtsai && echo "exist" || echo "notexist" 
notexist


测试的标志	代表意义
1. 关於某个档名的『文件类型』判断，如 test -e filename 表示存在否
-e	该『档名』是否存在？(常用)
-f	该『档名』是否存在且为文件(file)？(常用)
-d	该『档名』是否存在且为目录(directory)？(常用)
-b	该『档名』是否存在且为一个 block device 装置？
-c	该『档名』是否存在且为一个 character device 装置？
-S	该『档名』是否存在且为一个 Socket 文件？
-p	该『档名』是否存在且为一个 FIFO (pipe) 文件？
-L	该『档名』是否存在且为一个连结档？


2. 关於文件的权限侦测，如 test -r filename 表示可读否 (但 root 权限常有例外)
-r	侦测该档名是否存在且具有『可读』的权限？
-w	侦测该档名是否存在且具有『可写』的权限？
-x	侦测该档名是否存在且具有『可运行』的权限？
-u	侦测该档名是否存在且具有『SUID』的属性？
-g	侦测该档名是否存在且具有『SGID』的属性？
-k	侦测该档名是否存在且具有『Sticky bit』的属性？
-s	侦测该档名是否存在且为『非空白文件』？

3. 两个文件之间的比较，如： test file1 -nt file2
-nt	(newer than)判断 file1 是否比 file2 新
-ot	(older than)判断 file1 是否比 file2 旧
-ef	判断 file1 与 file2 是否为同一文件，可用在判断 hard link 的判定上。 主要意义在判定，两个文件是否均指向同一个 inode 哩！

4. 关於两个整数之间的判定，例如 test n1 -eq n2
-eq	两数值相等 (equal)
-ne	两数值不等 (not equal)
-gt	n1 大於 n2 (greater than)
-lt	n1 小於 n2 (less than)
-ge	n1 大於等於 n2 (greater than or equal)
-le	n1 小於等於 n2 (less than or equal)

5. 判定字串的数据
test -z string	判定字串是否为 0 ？若 string 为空字串，则为 true
test -n string	判定字串是否非为 0 ？若 string 为空字串，则为 false。
注： -n 亦可省略
test str1 = str2	判定 str1 是否等於 str2 ，若相等，则回传 true
test str1 != str2	判定 str1 是否不等於 str2 ，若相等，则回传 false

6. 多重条件判定，例如： test -r filename -a -x filename
-a	(and)两状况同时成立！例如 test -r file -a -x file，则 file 同时具有 r 与 x 权限时，才回传 true。
-o	(or)两状况任何一个成立！例如 test -r file -o -x file，则 file 具有 r 或 x 权限时，就可回传 true。
!	反相状态，如 test ! -x file ，当 file 不具有 x 时，回传 true

========================

利用判断符号 [ ]

[root@bestjiansong shellscript]# [ -z "$HOME" ] ; echo $?
1

========================
使用 file 来查询后，系统告知这个文件是个 bash 的可运行 script 

[root@bestjiansong shellscript]# file /etc/init.d/rsyslog 
/etc/init.d/rsyslog: Bourne-Again shell script text executable


==========================

Shell script 的默认变量($0, $1...)

/path/to/scriptname  opt1  opt2  opt3  opt4 
       $0             $1    $2    $3    $4
	   
$# ：代表后接的参数『个数』，以上表为例这里显示为『 4 』；
$@ ：代表『 "$1" "$2" "$3" "$4" 』之意，每个变量是独立的(用双引号括起来)；
$* ：代表『 "$1c$2c$3c$4" 』，其中 c 为分隔字节，默认为空白键， 所以本例中代表『 "$1 $2 $3 $4" 』之意。


shift 会移动变量，而且 shift 后面可以接数字，代表拿掉最前面的几个参数的意思。
[root@bestjiansong shellscript]# vim sh08.sh 


#!/bin/bash

echo "the script name is ==> $0"
echo "the parameter number is ==> $#"
[ "$#" -lt 2 ] && echo "the parameter of the number is less than 2 , stop here. " && exit 0

echo "your whole parameter is ==> '$@' "
shift
echo "the parameter number is ==> $#"
echo "your whole parameter is ==> '$@' "
shift 3
echo "the parameter number is ==> $#"
echo "your whole parameter is ==> '$@' "

#echo "your 1st parameter is ==> '$1' "
#echo "your 2st parameter is ==> '$2'"


[root@bestjiansong shellscript]# ./sh08.sh a b c d e f
the script name is ==> ./sh08.sh
the parameter number is ==> 6
your whole parameter is ==> 'a b c d e f' 
the parameter number is ==> 5
your whole parameter is ==> 'b c d e f' 
the parameter number is ==> 2
your whole parameter is ==> 'e f' 

============================================
条件判断式

if [ 条件判断式 ]; then
	当条件判断式成立时，可以进行的命令工作内容；
fi   <==将 if 反过来写，就成为 fi 啦！结束 if 之意！


[root@bestjiansong shellscript]# vim sh06_2.sh 
#!/bin/bash

read -p "please input (Y/N): " yn

if [ "$yn" == "Y" ] || [ "$yn" ==  "y" ]; then 
         echo "ok, continue "   
         exit 0
fi

if [ "$yn" == "N" ] || [ "$yn" ==  "n" ]; then 
        echo "oh, interrupt " 
        exit 0
fi

echo "i don't know what your choice is ..." && exit 0



多重、复杂条件判断式

# 一个条件判断，分成功进行与失败进行 (else)
if [ 条件判断式 ]; then
	当条件判断式成立时，可以进行的命令工作内容；
else
	当条件判断式不成立时，可以进行的命令工作内容；
fi

# 多个条件判断 (if ... elif ... elif ... else) 分多种不同情况运行
if [ 条件判断式一 ]; then
	当条件判断式一成立时，可以进行的命令工作内容；
elif [ 条件判断式二 ]; then
	当条件判断式二成立时，可以进行的命令工作内容；
else
	当条件判断式一与二均不成立时，可以进行的命令工作内容；
fi


[root@bestjiansong shellscript]# cat sh06_3.sh 
#!/bin/bash

read -p "please input (Y/N): " yn

if [ "$yn" == "Y" ] || [ "$yn" ==  "y" ]; then 
         echo "ok, continue " 


elif [ "$yn" == "N" ] || [ "$yn" ==  "n" ]; then 
        echo "oh, interrupt " 
else

echo "i don't know what your choice is ..." 

fi


[root@bestjiansong shellscript]# vim sh09.sh
#!/bin/bash

if [ "$1" == "hello" ]; then
        echo "hello, are you okay? "
elif [ "$1" == "" ]; then
        echo "you must input parameters, ex> {$0 someword}"
else 
        echo "the only parameter is 'hello', ex> {$0 hello}"
fi


===========================

80: WWW
22: ssh
21: ftp
25: mail
111: RPC(远程程序呼叫)
631: CUPS(列印服务功能)



#!/bin/bash

echo "Now, i will detect your Linux server's services!"
echo -e "The www, ftp, ssh, and mail will be detect! \n"

testing=$(netstat -tuln | grep ":80 ")
if [ "$testing" != "" ]; then
        echo "www is running in your system."
fi

testing=$(netstat -tuln | grep ":22 ")
if [ "$testing" != "" ]; then
        echo "SSH is running in your system."
fi

testing=$(netstat -tuln | grep ":21 ")
if [ "$testing" != "" ]; then
        echo "FTP is running in your system."
fi

testing=$(netstat -tuln | grep ":25 ")
if [ "$testing" != "" ]; then
        echo "Mail is running in your system."
fi

利用 case ..... esac 判断

case  $变量名称 in   <==关键字为 case ，还有变量前有钱字号
  "第一个变量内容")   <==每个变量内容建议用双引号括起来，关键字则为小括号 )
	程序段
	;;            <==每个类别结尾使用两个连续的分号来处理！
  "第二个变量内容")
	程序段
	;;
  *)                  <==最后一个变量内容都会用 * 来代表所有其他值
	不包含第一个变量内容与第二个变量内容的其他程序运行段
	exit 1
	;;
esac                  <==最终的 case 结尾！『反过来写』思考一下！



case $1 in
        "hello")
                echo "hello, are you okay? "
                ;;
        ....)
                echo "you must input parameters, ex> {$0 someword}"
                ;;
        *)
                echo "Usage $0 {hello}"
                ;;
esac



[root@bestjiansong shellscript]# vim sh12.sh
#!/bin/bash

echo "This program will print your selection "

case $1 in
        "one")
                echo "Your choice is one ."
                ;;
        "two")
                echo "your choice is two ."
                ;;
        "three")
                echo "your choice is three ."
                ;;
        *)
                echo "Usage $0 {one|two|three}"
                ;;
esac

===============================

利用 function 功能

function fname() {
	程序段
}

[root@bestjiansong shellscript]# vim sh12_2.sh
#!/bin/bash

function printit(){
        echo -n "Your choice is "
}

echo "This program will print your selection !"
case $1 in
        "one")
                printit; echo $1 | tr 'a-z' 'A-Z'
                ;;
        "two")
                printit; echo $1 | tr 'a-z' 'A-Z'
                ;;
        "three")
                printit; echo $1 | tr 'a-z' 'A-Z'
                ;;
        *)
                echo "Usage $0 {one|two|three}"
                ;;
esac

====================================

[root@bestjiansong shellscript]# vim sh12_3.sh
#!/bin/bash

function printit(){
        echo "Your choice is $1"
}

echo "This program will print your selection !"
case $1 in
        "one")
                printit 1
                ;;
        "two")
                printit 2
                ;;
        "three")
                printit 3
                ;;
        *)
                echo "Usage $0 {one|two|three}"
                ;;
esac

============================

while [ condition ]  <==中括号内的状态就是判断式
do            <==do 是回圈的开始！
	程序段落
done          <==done 是回圈的结束

while 的中文是『当....时』，所以，这种方式说的是『当 condition 条件成立时，就进行回圈，
直到 condition 的条件不成立才停止』的意思。


until [ condition ]
do
	程序段落
done

这种方式恰恰与 while 相反，它说的是『当 condition 条件成立时，就终止回圈， 否则就持续进行回圈的程序段。』

[root@bestjiansong shellscript]# cat sh13.sh 
#!/bin/bash

while [ "$yn" != "yes" -a "$yn" != "YES" ]
do
        read -p "please input yes/YES to stop this program: " yn
done
echo "OK! you input the correct answer."

=======================

[root@bestjiansong shellscript]# cat sh13_2.sh 
#!/bin/bash

until [ "$yn" == "yes" -o "$yn" == "YES" ]
do
        read -p "please input yes/YES to stop this program: " yn
done
echo "OK! you input the correct answer."


=====================

[root@bestjiansong shellscript]# vim sh14.sh
#!/bin/bash

s=0
i=0
while [ "$i" != "100" ]
do
        i=$(($i+1))
        s=$(($s+$i))
done
echo "The result of '1+2+3...+100' is ==> $s"

[root@bestjiansong shellscript]# chmod +x sh14.sh 
[root@bestjiansong shellscript]# pwd
/tmp/shellscript
[root@bestjiansong shellscript]# /tmp/shellscript/sh14.sh 
The result of '1+2+3...+100' is ==> 5050

====================

for...do...done 

for 这种语法，则是『 已经知道要进行几次回圈』的状态！他的语法是：

for var in con1 con2 con3 ...
do
	程序段
done


以上面的例子来说，这个 $var 的变量内容在回圈工作时：

第一次回圈时， $var 的内容为 con1 ；
第二次回圈时， $var 的内容为 con2 ；
第三次回圈时， $var 的内容为 con3 ；
....


[root@bestjiansong shellscript]# vim sh15.sh
#!/bin/bash

for animal in dog cat elephant
do
        echo "There are ${animal}s"
done


[root@bestjiansong shellscript]# /tmp/shellscript/sh15.sh 
There are dogs
There are cats
There are elephants

利用 ping 这个可以判断网络状态的命令， 来进行网络状态的实际侦测时，
我想要侦测的网域是本机所在的 192.168.1.1~192.168.1.100，
由於有 100 台主机， 总不会要我在 for 后面输入 1 到 100 吧？此时你可以这样做喔！
[root@bestjiansong shellscript]# cat sh17.sh 
#!/bin/bash

network="192.168.150.1"
for sitenu in $(seq 1 100)
do
        ping -c 1 -w 1 ${network}.${sitenu} &> /dev/null && result=0 || result=1

        if [ "$result" == 0 ]; then
                echo "Server ${network}.${sitenu} is UP."
        else
                echo "Server ${network}.${sitenu} is DOWN."
        fi
done


让我们来玩判断式加上回圈的功能！我想要让使用者输入某个目录档名， 
然后我找出某目录内的档名的权限，该如何是好？呵呵！可以这样做啦～

#!/bin/bash

read -p "please input a directory: " dir
if [ "$dir" == "" -o ! -d "$dir" ]; then
        echo "The $dir is not exist in your system."
        exit 1
fi

filelist=$(ls $dir)
for filename in $filelist
do
        perm=""
        test -r "$dir/$filename" && perm="$perm readable"
        test -w "$dir/$filename" && perm="$perm writable"
        test -x "$dir/$filename" && perm="$perm executable"
done

=====================

or...do...done 的数值处理
除了上述的方法之外，for 回圈还有另外一种写法！语法如下：

for (( 初始值; 限制值; 运行步阶 ))
do
	程序段
done


#!/bin/bash

read -p "please input a number, i will count for 1+2+3...+your_input: " nu

s=0
for (( i=1; i<=$nu; i=i+1 ))
do
        s=$(($s+$i))
done
echo "The result of '1+2+3...+nu' is ==> $s "

[root@bestjiansong shellscript]# /tmp/shellscript/sh19.sh 
please input a number, i will count for 1+2+3...+your_input: 100
The result of '1+2+3...+nu' is ==> 5050 

=============================================

shell script 的追踪与 debug

[root@www ~]# sh [-nvx] scripts.sh
选项与参数：
-n  ：不要运行 script，仅查询语法的问题；
-v  ：再运行 sccript 前，先将 scripts 的内容输出到萤幕上；
-x  ：将使用到的 script 内容显示到萤幕上，这是很有用的参数


范例一：测试 sh16.sh 有无语法的问题？
[root@www ~]# sh -n sh16.sh 
# 若语法没有问题，则不会显示任何资讯！

范例二：将 sh15.sh 的运行过程全部列出来～
[root@www ~]# sh -x sh15.sh 
+ PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/root/bin
+ export PATH
+ for animal in dog cat elephant
+ echo 'There are dogs.... '
There are dogs....
+ for animal in dog cat elephant
+ echo 'There are cats.... '
There are cats....
+ for animal in dog cat elephant
+ echo 'There are elephants.... '
There are elephants....

