
===============================================
批量管理：

SecureCRT 使用技巧：
管理多台主机时可用：

1. File / Connect 下选择 open in a tab

2. view / Chat Window 在下面的白色窗口右击选择 Send Chat to all Sessions 

3. 在这个窗口输入的命令所有打开的窗口都会同时执行


================================================

关机：

halt == shutdown -h now

[root@bestjiansong ~]# halt

Broadcast message from root@bestjiansong
        (/dev/pts/0) at 9:55 ...

The system is going down for halt NOW!

================================================

VMware 克隆之后上不了网的问题

1.vi /etc/sysconfig/network-scripts/ifcfg-eth0
  注释或删除掉 HWADDR 和 UUID
  
2. >/ect/udev/rules.d/70-persistent-net.rules

3. reboot 重启一下

===============================================

相对路径： 不从根 / 开始,而是从当前目录开始。

绝对路径： 从根 / 开始的目录，就叫绝对路径。

==============================================

cat 特殊用法：

[root@bestjiansong data]# cat > /data/jiansong.txt<<EOF
> GOOD LUCK! BEST JIANSONG!
> EOF

    增加多行内容
[root@bestjiansong data]# cat >> /data/jiansong.txt <<EOF
> you can be the best!
> EOF
 
	EOF 要成对出现，EOF可以被任意成对内容替换
	箭头的方向就是数据的流向
	
[root@bestjiansong data]# echo "
> sunshine
> nice
> " >> /data/jiansong.txt
[root@bestjiansong data]# cat jiansong.txt 
GOOD LUCK! BEST JIANSONG!
you can be the best!
pretty boy!

sunshine
nice

=============================================================

箭头的方向就是数据的流向

> 或 1> 会清除文件里以前的数据，增加行数据

> 或 1>> 文件结尾增加内容，不会删除已有的数据

<0  输入重定向

<<0 追加输入重定向

2>  错误重定向

2>>  错误追加重定向

1.标准输入(stdin): 代码为0， 使用 < 或 << 数据流从右向左

2.标准输出 (stdout): 代码为1， 使用 > 或 >> 数据流从左向右

3.错误输出 (stderr): 代码为2， 使用 2> 或 2>> 


如果输入正确，则进入 jiansong.txt ,输入错误则进入 error.txt
[root@bestjiansong data]# echo 111 1> jiansong.txt 2> error.txt

[root@bestjiansong data]# ech 111 1> jiansong.txt 2> error.txt 
[root@bestjiansong data]# cat error.txt 
-bash: ech: command not found

=================================================================

拷贝目录：

cp -a    相当于 -pdr

或 cp -r

-r : 递归，用于复制目录
-p : 保持属性
-a : 相当于 -pdr 
[root@bestjiansong data]# cp -a /etc/ /tmp/


=====================================================================

查找文件
find :

[root@bestjiansong data]# find /root/data/ -type f
/root/data/jiansong.txt

删除文件
[root@bestjiansong data]# find /root/data/ -type f -exec rm -f {} \;

或
[root@bestjiansong data]# find /root/data/ -type f | xargs rm -f

指定名字查找：

[root@bestjiansong data]# find /root/data/ -name "laosongsan.txt"
/root/data/laosongsan.txt

先按文件类型查找，再按名字查找
[root@bestjiansong data]# find /root/data/ -type f -name "laosongsan.txt" 
/root/data/laosongsan.txt

除了 jiansong.txt 这个文件，剩下的都删掉
[root@bestjiansong data]# find /root/data/ -type f ! -name "jiansong.txt" | xargs rm -f
[root@bestjiansong data]# ls
jiansong.txt

========================================================

head 取文件的前 n 行， 如果不接参数取默认的前 10 行 
 head -n 3 简写为 head -3

[root@bestjiansong ~]# head -2 test.txt 
test
jiansong

+++++++++++++++++++++++++++++++++++++

*****grep

grep == 过滤器，把想要的和不想要的分离开

[root@bestjiansong ~]# grep "jiansong" test.txt 
jiansong


-v 是排除的意思

(这个更专业)
[root@bestjiansong ~]# grep -v "jiansong" test.txt 
test
laosongsan
wanglaoer

(这个需要经过管道，速度可能会慢)
[root@bestjiansong ~]# cat test.txt | grep -v "laosongsan"
test
jiansong
wanglaoer

*****sed
过滤
[root@bestjiansong ~]# sed -n '/laosongsan/p' test.txt     (-n 取消默认输出 p打印)
laosongsan

等同于

[root@bestjiansong ~]# grep "laosongsan" test.txt 
laosongsan

删除 laosongsan 
[root@bestjiansong ~]# sed '/laosongsan/d' test.txt   (d 删除)
test
jiansong
wanglaoer

sed用法：

过滤：  sed -n '/过滤的命令/处理的命令'  文件 
  
        -n 取消sed的默认输出
		-i 改变文件内容
		
		处理的命令： p  print打印
					 d  delete删除
					 
===========================================================================

yum Linux 包管理器  yum帮助解决依赖问题

	例子： yum install tree(包名) -y  
		   下载 tree 然后调用rpm 安装 tree
		    如果需要依赖包，帮你下载，帮你提前安装。

rpm -ivh(安装，显示，输出，人类可读)
	例子： rpm -ivh 包名.rpm  (提前下载好)
	
	最大问题： 依赖问题不好解决
	
====================================================

tree-rpm 命令

[root@bestjiansong ~]# rpm -qa tree     (-q  query  -a all)
tree-1.5.3-3.el6.x86_64

tree 显示目录树结构

[root@bestjiansong ~]# tree /root/
/root/
├── anaconda-ks.cfg
├── data
│   └── jiansong.txt
├── install.log
├── install.log.syslog
├── Linux.txt
└── test.txt

=====================================================

别名：

如果 tmp 下也有 test.txt 文件 ， 复制文件方法如下

[root@bestjiansong ~]# /bin/cp /mnt/test.txt /tmp/
[root@bestjiansong ~]# \cp /mnt/test.txt /tmp/

alias cp='cp -i'  -i 确认


查询别名

[root@bestjiansong ~]# alias
alias cp='cp -i'
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'

取消别名

[root@bestjiansong ~]# unalias cp

[root@bestjiansong ~]# alias
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'


取消别名后在复制不会提醒覆盖

[root@bestjiansong ~]# cp /mnt/test.txt  /tmp/

如果加 -i 还会提醒

[root@bestjiansong ~]# cp -i /mnt/test.txt /tmp/
cp: overwrite `/tmp/test.txt'? 

查看及定义别名：

[root@bestjiansong ~]# alias jiansong='echo i am yu jian song ,the best boy.'

[root@bestjiansong ~]# alias
alias cp='cp -i'
alias jiansong='echo i am yu jian song ,the best boy.'
alias l.='ls -d .* --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'

别名生效的位置：(root 用户)
[root@bestjiansong ~]# grep alias /root/.bashrc
# User specific aliases and functions
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

所有用户都生效 /etc/bashrc 或 /etc/profile 定义

生效   source /etc/profiles

===============================================================

~  用户的家目录

seq 命令：

seq == sequence 序列

[root@bestjiansong ~]# seq 6
1
2
3
4
5
6

[root@bestjiansong ~]# seq 2 6
2
3
4
5
6

奇数
[root@bestjiansong ~]# seq 1 2 10
1
3
5
7
9

偶数
[root@bestjiansong ~]# seq 2 2 10
2
4
6
8
10


[root@bestjiansong ~]# seq --help
Usage: seq [OPTION]... LAST
  or:  seq [OPTION]... FIRST LAST
  or:  seq [OPTION]... FIRST INCREMENT LAST


指定分隔符
seq -s
[root@bestjiansong ~]# seq -s "=" 5
1=2=3=4=5

=================================================

tail 命令：
		-f  跟踪一个文件尾部的时时变化
[root@bestjiansong ~]# tail test.txt 
91
92
93
94
95
96
97
98
99
100


[root@bestjiansong ~]# tail -3 test.txt 
98
99
100

查看第20到30行的内容(test.txt 共有100行)
[root@bestjiansong ~]# head -30 test.txt | tail -11
20
21
22
23
24
25
26
27
28
29
30

====================================================================

或者
(简单高效)  sed擅长取行
[root@bestjiansong ~]# sed -n '20,30p' test.txt 
20
21
22
23
24
25
26
27
28
29
30

=======================================================================

awk 
   过滤内容 (取列)
   
   awk  -F "分隔符号" '{print $1}' 文件   <==  $1 第一列 $2 第二列 $NF 最后一列
   
   
   [root@bestjiansong ~]# awk -F ":" '{print $1}' /etc/passwd

可以加空格 " "
[root@bestjiansong ~]# awk -F ":" '{print $1 " " $2 " " $3}' /etc/passwd
root x 0
bin x 1
daemon x 2
adm x 3

倒数第一列
[root@bestjiansong ~]# awk -F ":" '{print $NF}' /etc/passwd

倒数第二列
[root@bestjiansong ~]# awk -F ":" '{print $(NF-1)}' /etc/passwd


====================================================================
 
NR 代表行号
[root@bestjiansong ~]# awk '{if(NR<31 && NR>19) printf $1 "\n"}' test.txt 
20
21
22
23
24
25
26
27
28
29
30


==========================================================

grep :
	  -B 除了显示匹配的一行之外，并显示该行之前的num行 (before)
	  -A 除了显示匹配的一行之外，并显示该行之后的num行 (after)
	  -C 除了显示匹配的一行之外，并显示该行之前后的num行
	  

[root@bestjiansong ~]# grep 30 -B 10 test.txt 

20
21
22
23
24
25
26
27
28
29
30


[root@bestjiansong ~]# grep 20 -A 10 test.txt 
20
21
22
23
24
25
26
27
28
29
30

[root@bestjiansong ~]# grep 25 -C 5 test.txt 
20
21
22
23
24
25
26
27
28
29
30

========================================================

***** sed 替换

[root@bestjiansong ~]# cat test.txt 
jiansong
pretty boy

[root@bestjiansong ~]# sed 's#jiansong#yujiansong#g' test.txt 
yujiansong
pretty boy

[root@bestjiansong ~]# sed -i 's#jiansong#yujiansong#g' test.txt 
[root@bestjiansong ~]# cat test.txt 
yujiansong
pretty boy
hello

sed -i 's###g' test.txt 

s 常说的查找并替换 用一个字符串替换成另一个
g (global)与s联合使用时，表示对当前行全局匹配替换
-i 修改文件内容
# 是分隔符，可以用 /@ 等替换

=========================================================================


[root@bestjiansong data]# tree
.
├── a
│   ├── ddd
│   │   └── fff
│   └── test.txt
├── b
├── c
│   └── test.txt
├── d
├── e
└── jiansong.txt


[root@bestjiansong data]# find /root/data/ -type f -name "test.txt" | xargs sed -i 's#jiansong#yujiansong#g'

或

[root@bestjiansong data]# find /root/data/ -type f -name "test.txt" -exec sed -i 's#jiansong#yujiansong#g' {} \;


[root@bestjiansong data]# sed 's#yujiansong#jiansong#g' `find /root/data/ -type f -name "test.txt"`
































